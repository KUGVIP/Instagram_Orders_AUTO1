import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
from datetime import datetime, time
import unicodedata

st.set_page_config(page_title="Instagram Orders", layout="wide")

st.markdown("""
    <style>
        textarea, input, select, .stTextInput>div>div>input {
            font-size: 16px !important;
            padding: 6px 8px !important;
        }
        [data-testid="column"] {
            padding: 0.5rem;
        }
        .st-bd { border-radius: 12px; }
        .stButton > button {
            background-color: #4CAF50; color: white;
            border-radius: 10px; padding: 0.5em 1.5em; font-size: 15px;
        }
    </style>
""", unsafe_allow_html=True)

def connect_gsheet():
    scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
    creds = Credentials.from_service_account_info(st.secrets["google_service_account"], scopes=scope)
    client = gspread.authorize(creds)
    return client.open("Instagram Orders").worksheet("ƒê∆°n H√†ng")

def read_orders(sheet):
    return pd.DataFrame(sheet.get_all_records())

def append_order(sheet, data):
    sheet.append_row(data)

def update_sheet(sheet, df):
    sheet.clear()
    sheet.append_row(df.columns.tolist())
    for row in df.itertuples(index=False):
        sheet.append_row(list(row))

def remove_accents(input_str):
    nfkd_form = unicodedata.normalize('NFKD', input_str)
    return "".join([c for c in nfkd_form if not unicodedata.combining(c)]).lower()

st.title("üå∏ Instagram Orders Manager")
with st.expander("üìò H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng", expanded=False):
    st.markdown("""
    ** ƒê·ªÉ c√≥ th·ªÉ th·ª±c hi·ªán b·∫°n c·∫ßn th·ª±c hi·ªán theo quy tr√¨nh n√†y nh√© B√† Ch·ªß gi√†u <3:**
                
    **B1: T·∫°o tin nh·∫Øn s·∫µn theo c·∫ßu tr√∫c s·∫µn tr√™n IG ƒë·ªÉ khi t∆∞ v·∫•n kh√°ch s·∫Ω ch·ªët v·ªõi kh√°ch theo c√°c th√¥ng tin sau (·∫£nh c√≥ th·ªÉ kh√¥ng c·∫ßn cho v√¨ a ch∆∞a update k·ªãp :)))**
    - T√™n 
    - IG: @hoa.kem
    - SƒêT: 0987654321
    - ƒê·ªãa ch·ªâ: 123 L√™ L·ª£i, Qu·∫≠n 1
    - ·∫¢nh m·∫´u: https://www.instagram.com/p/abc123/
    - S·ªë l∆∞·ª£ng b√≥: 2
    - gi√°: 20294
    - C·ªçc: 9237049725
    - Note y√™u c·∫ßu kh√°ch h√†ng: Giao bu·ªïi s√°ng, tr√°nh g·ªçi
    - Tr·∫°ng th√°i:
                
    **B2: sau khi ch·ªët ƒë∆°n v·ªõi kh√°ch theo c·∫•u tr√∫c kia th√¨ coppy tin nh·∫Øn ƒë√≥ d√°n v√†o trong app**
                
    **B3: Done nh√© Ph∆∞∆°ng b√© :V**
                
    **üåº C√°ch nh·∫≠p ƒë∆°n h√†ng m·ªõi:**
    - D√°n n·ªôi dung tin nh·∫Øn v√†o √¥ üì©
    - Ch·ªçn ng√†y giao, gi·ªù giao, tr·∫°ng th√°i
    - B·∫•m ‚úÖ *Ghi v√†o Google Sheet*

    **üîç C√°ch l·ªçc ƒë∆°n h√†ng:**
    - Ch·ªçn ng√†y ho·∫∑c gi·ªù giao n·∫øu mu·ªën
    - L·ªçc theo tr·∫°ng th√°i, IG, ng∆∞·ªùi nh·∫≠n, ƒë·ªãa ch·ªâ, ghi ch√∫...
    - B·∫•m üîÑ *Reset b·ªô l·ªçc* ƒë·ªÉ x√≥a t·∫•t c·∫£

    **üìù C√°ch ch·ªânh s·ª≠a ƒë∆°n h√†ng:**
    - Ch·ªânh tr·ª±c ti·∫øp b·∫£ng ·ªü d∆∞·ªõi
    - Sau khi ch·ªânh, b·∫•m üìè *C·∫≠p nh·∫≠t thay ƒë·ªïi v√†o Google Sheets*

    > App hi·ªÉn th·ªã t·ªët tr√™n c·∫£ ƒëi·ªán tho·∫°i v√† m√°y t√≠nh.
    """)

with st.expander("‚ûï Nh·∫≠p ƒë∆°n m·ªõi", expanded=True):
    input_text = st.text_area("üì© D√°n n·ªôi dung tin nh·∫Øn ƒë∆°n h√†ng", height=200)
    giao_ngay = st.date_input("üìÖ Ng√†y giao h√†ng")
    giao_gio = st.time_input("‚è∞ Gi·ªù giao", value=time(9, 0))
    trang_thai = st.selectbox("üì¶ Tr·∫°ng th√°i", ["Ch∆∞a giao", "ƒê√£ giao"])

    if st.button("‚úÖ Ghi v√†o Google Sheet"):
        if not input_text.strip():
            st.warning("‚ö†Ô∏è B·∫°n ch∆∞a nh·∫≠p n·ªôi dung ƒë∆°n!")
        else:
            try:
                lines = input_text.strip().split("\n")
                data = {
                    "Th·ªùi gian ƒë·∫∑t h√†ng": datetime.now().strftime("%d/%m/%Y %H:%M:%S"),
                    "Ng√†y giao h√†ng": giao_ngay.strftime("%d/%m/%Y"),
                    "Gi·ªù giao h√†ng": giao_gio.strftime("%H:%M"),
                    "T√™n IG": lines[0].split(":")[1].strip() if "T√™n IG" in lines[0] else "",
                    "T√™n ng∆∞·ªùi nh·∫≠n": lines[1].split(":")[1].strip(),
                    "SƒêT": lines[2].split(":")[1].strip(),
                    "ƒê·ªãa ch·ªâ": lines[3].split(":")[1].strip(),
                    "·∫¢nh m·∫´u": f'=IMAGE("{lines[4].split(":")[1].strip()}")',
                    "S·ªë l∆∞·ª£ng b√≥": lines[5].split(":")[1].strip(),
                    "Gi√°": lines[6].split(":")[1].strip(),
                    "C·ªçc": lines[7].split(":")[1].strip(),
                    "Note": lines[8].split(":")[1].strip() if len(lines) > 8 else "",
                    "Tr·∫°ng th√°i": trang_thai
                }
                sheet = connect_gsheet()
                append_order(sheet, list(data.values()))
                st.success("‚úÖ ƒê√£ ghi ƒë∆°n v√†o Google Sheets!")
            except Exception as e:
                st.error(f"‚ùå L·ªói ghi d·ªØ li·ªáu: {e}")

st.subheader("üìù Ch·ªânh s·ª≠a & L∆∞u ƒë∆°n h√†ng")
try:
    sheet = connect_gsheet()
    df = read_orders(sheet)

    if "reset_trigger" not in st.session_state:
        st.session_state.reset_trigger = False

    def reset_filters():
        st.session_state.selected_date = ""
        st.session_state.enable_time_range = False
        st.session_state.from_time = time(0, 0)
        st.session_state.to_time = time(23, 59)
        st.session_state.status_filter = []
        st.session_state.ig_filter = []
        st.session_state.keyword_note = ""
        st.session_state.keyword_address = ""
        st.session_state.keyword_name = ""

    with st.expander("üîç B·ªô l·ªçc n√¢ng cao (ƒë·ªôc l·∫≠p)", expanded=True):
        if st.button("üîÑ Reset t·∫•t c·∫£ b·ªô l·ªçc"):
            reset_filters()

        selected_date = st.selectbox("üìÖ Ch·ªçn ng√†y giao h√†ng", options=[""] + sorted(df["Ng√†y giao h√†ng"].unique().tolist()), key="selected_date")
        enable_time_range = st.checkbox("üìç L·ªçc theo gi·ªù giao h√†ng", key="enable_time_range")
        if enable_time_range:
            from_time = st.time_input("T·ª´ gi·ªù", value=st.session_state.get("from_time", time(0, 0)), key="from_time")
            to_time = st.time_input("ƒê·∫øn gi·ªù", value=st.session_state.get("to_time", time(23, 59)), key="to_time")
        else:
            from_time, to_time = None, None

        status_all = df["Tr·∫°ng th√°i"].dropna().unique().tolist()
        ig_all = df["T√™n IG"].dropna().unique().tolist()
        ten_all = df["T√™n ng∆∞·ªùi nh·∫≠n"].dropna().unique().tolist()

        status_filter = st.multiselect("Tr·∫°ng th√°i", status_all, key="status_filter")
        ig_filter = st.multiselect("T√™n IG", ig_all, key="ig_filter")

        keyword_note = st.text_input("üîç T√¨m trong ghi ch√∫ (Note)", key="keyword_note")
        keyword_address = st.text_input("üîç T√¨m trong ƒë·ªãa ch·ªâ", key="keyword_address")
        keyword_name = st.selectbox("üîç T√¨m trong t√™n ng∆∞·ªùi nh·∫≠n", options=[""] + sorted(ten_all), key="keyword_name")

    filtered_df = df.copy()

    if st.session_state.selected_date:
        filtered_df = filtered_df[filtered_df["Ng√†y giao h√†ng"] == st.session_state.selected_date]

    if enable_time_range:
        filtered_df = filtered_df[
            (filtered_df["Gi·ªù giao h√†ng"] >= from_time.strftime("%H:%M")) &
            (filtered_df["Gi·ªù giao h√†ng"] <= to_time.strftime("%H:%M"))
        ]

    if st.session_state.status_filter:
        filtered_df = filtered_df[filtered_df["Tr·∫°ng th√°i"].isin(st.session_state.status_filter)]
    if st.session_state.ig_filter:
        filtered_df = filtered_df[filtered_df["T√™n IG"].isin(st.session_state.ig_filter)]

    if st.session_state.keyword_note:
        filtered_df = filtered_df[filtered_df["Note"].str.contains(st.session_state.keyword_note, case=False, na=False)]
    if st.session_state.keyword_address:
        filtered_df = filtered_df[filtered_df["ƒê·ªãa ch·ªâ"].str.contains(st.session_state.keyword_address, case=False, na=False)]
    if st.session_state.keyword_name:
        keyword_no_accent = remove_accents(st.session_state.keyword_name)
        filtered_df = filtered_df[
            filtered_df["T√™n ng∆∞·ªùi nh·∫≠n"].apply(lambda x: keyword_no_accent in remove_accents(x))
        ]

    def add_colored_status(row):
        if row == "ƒê√£ giao":
            return "üü¢ ƒê√£ giao"
        elif row == "Ch∆∞a giao":
            return "üî¥ Ch∆∞a giao"
        else:
            return row

    df_display = filtered_df.copy()
    df_display["Tr·∫°ng th√°i"] = df_display["Tr·∫°ng th√°i"].apply(add_colored_status)

    st.markdown("### üìÇ Danh s√°ch sau khi l·ªçc (kh√¥ng ƒë∆∞·ª£c ghi l·∫°i)")
    st.dataframe(df_display, use_container_width=True)

    st.markdown("### üìù Ch·ªânh s·ª≠a to√†n b·ªô ƒë∆°n (ghi l·∫°i t·∫•t c·∫£)")
    df["Tr·∫°ng th√°i"] = df["Tr·∫°ng th√°i"].apply(add_colored_status)

    edited_df = st.data_editor(
        df,
        use_container_width=True,
        num_rows="dynamic",
        column_config={
            "Tr·∫°ng th√°i": st.column_config.SelectboxColumn(
                "Tr·∫°ng th√°i",
                options=["üü¢ ƒê√£ giao", "üî¥ Ch∆∞a giao"],
                required=True
            )
        }
    )

    edited_df["Tr·∫°ng th√°i"] = edited_df["Tr·∫°ng th√°i"].replace({
        "üü¢ ƒê√£ giao": "ƒê√£ giao",
        "üî¥ Ch∆∞a giao": "Ch∆∞a giao"
    })

    if st.button("üìè C·∫≠p nh·∫≠t thay ƒë·ªïi v√†o Google Sheets"):
        update_sheet(sheet, edited_df)
        st.success("‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng!")

except Exception as e:
    st.error(f"‚ùå Kh√¥ng th·ªÉ t·∫£i Google Sheets: {e}")
